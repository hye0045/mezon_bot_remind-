//-- IMPORT LIBRARY-- 
const dotenv = require("dotenv");//ƒê·ªçc c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
const { MezonClient } = require("mezon-sdk");//Th∆∞ vi·ªán MezonClient
const axios = require('axios');//th∆∞ vi·ªán th·ª±c hi·ªán y√™u c·∫ßu HTTP(G·ªçi API l·∫•y quote)
const fs = require('fs').promises; // S·ª≠ d·ª•ng fs.promises (node.js) cho thao t√°c file b·∫•t ƒë·ªìng b·ªô
const path = require('path');//module path (node.js) ƒë·ªÉ x·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n file

dotenv.config();//t·∫£i c√°c bi·∫øn t·ª´ file .env v√†o process.env

// --- CONFIGURATION ---
const COMMAND_PREFIX = process.env.COMMAND_PREFIX || "!";
const BOT_ID = process.env.BOT_ID;
// const REMINDERS_FILE_PATH = path.join(__dirname, 'reminders.json'); 
const DATA_DIR = process.env.RENDER_DISK_MOUNT_PATH || __dirname; 
const REMINDERS_FILE_PATH = path.join(DATA_DIR, 'reminders.json'); 
// --- BOT STATE ---
let REMINDERS = [];//m·∫£ng ch·ª©a ƒë·ªëi t∆∞·ª£ng reminder
let nextReminderId = 1;// bi·∫øn ƒë·∫øm ƒë·ªÉ t·∫°o ID 

// --- COMMANDS DEFINITIONS ---
const SET_REMINDER_COMMAND = "nhacnho";
const LIST_REMINDERS_COMMAND = "danhsach";
const DELETE_REMINDER_COMMAND = "xoa";
const HELP_COMMAND_REMINDER = "trogiup";
const SET_DAILY_QUOTE_COMMAND = "quotehangngay";

// --- HELP MESSAGE ---
const HELP_MESSAGE_REMINDER = `L·ªÜNH BOT NH·∫ÆC NH·ªû (Ti·ªÅn t·ªë: ${COMMAND_PREFIX})
${COMMAND_PREFIX}${SET_REMINDER_COMMAND} [HH:MM] [DD/MM/YYYY] [N·ªôi dung]
  ƒê·∫∑t m·ªôt nh·∫Øc nh·ªü. V√≠ d·ª•: ${COMMAND_PREFIX}${SET_REMINDER_COMMAND} 09:00 30/10/2024 N·ªôp b√°o c√°o th√°ng

${COMMAND_PREFIX}${LIST_REMINDERS_COMMAND}
  Li·ªát k√™ c√°c nh·∫Øc nh·ªü c·ªßa b·∫°n trong k√™nh n√†y.

${COMMAND_PREFIX}${DELETE_REMINDER_COMMAND} [ID_nh·∫Øc_nh·ªü]
  X√≥a m·ªôt nh·∫Øc nh·ªü. V√≠ d·ª•: ${COMMAND_PREFIX}${DELETE_REMINDER_COMMAND} 1

${COMMAND_PREFIX}${SET_DAILY_QUOTE_COMMAND} [HH:MM]
  ƒê·∫∑t l·ªãch nh·∫≠n tr√≠ch d·∫´n hay v√†o HH:MM m·ªói ng√†y. V√≠ d·ª•: ${COMMAND_PREFIX}${SET_DAILY_QUOTE_COMMAND} 07:30

${COMMAND_PREFIX}${HELP_COMMAND_REMINDER}
  Hi·ªÉn th·ªã danh s√°ch l·ªánh n√†y.
`;

// --- MEZON CLIENT ---
const client = new MezonClient(process.env.APPLICATION_TOKEN);

// --- FILE I/O FOR REMINDERS ---
async function loadRemindersFromFile() {
    try {
        await fs.access(REMINDERS_FILE_PATH); // Ki·ªÉm tra t·ªìn t·∫°i c·ªßa file 
        const data = await fs.readFile(REMINDERS_FILE_PATH, 'utf8');
        if (!data.trim()) return []; // X·ª≠ l√Ω t·ªáp r·ªóng 
        const parsedReminders = JSON.parse(data);
        return parsedReminders.map(r => ({
            ...r,
            due_time: new Date(r.due_time), // Chuy·ªÉn chu·ªói ƒë·ªãnh d·∫°ng ISO v·ªÅ ƒë·ªëi t∆∞·ª£ng Date
            // last_triggered_date ƒë∆∞·ª£c l∆∞u d∆∞·ªõi d·∫°ng chu·ªói, kh√¥ng c·∫ßn chuy·ªÉn ƒë·ªïi 
        }));
    } catch (error) {
        if (error.code === 'ENOENT') {//ki·ªÉm tra l·ªói file c√≥ t·ªìn t·∫°i hay kh√¥ng
            console.log("Reminders file not found. Starting with an empty list.");
        } else {
            console.error("Error loading reminders:", error.message, "A new reminders file might be created or an empty list will be used.");
        }
        return [];
    }
}

async function saveRemindersToFile() {
    try {
        const dataToSave = JSON.stringify(REMINDERS, null, 2); // Hi·ªÉn th·ªã JSON d·ªÖ ƒë·ªçc
        await fs.writeFile(REMINDERS_FILE_PATH, dataToSave, 'utf8');
        console.log("Reminders saved to file."); 
    } catch (error) {
        console.error("Error saving reminders:", error);
    }
}
// H√†m kh·ªüi t·∫°o danh s√°ch nh·∫Øc nh·ªü khi bot b·∫Øt ƒë·∫ßu
async function initializeReminders() {
    REMINDERS = await loadRemindersFromFile();
    if (REMINDERS.length > 0) {
        const maxId = REMINDERS.reduce((max, r) => (r.id > max ? r.id : max), 0);
        nextReminderId = maxId + 1;
    } else {
        nextReminderId = 1;
    }
    console.log(`Reminders loaded. Count: ${REMINDERS.length}. Next ID: ${nextReminderId}`);
}

// --- MAIN BOT LOGIC ---
async function main() {
    await initializeReminders(); // Load reminders tr∆∞·ªõc khi login
    await client.login();

    client.onChannelMessage(async (event) => {
        try {
            const originMessage = event?.content?.t;
            if (!originMessage || event?.sender_id === BOT_ID) {
                return;
            }

            if (originMessage.startsWith(COMMAND_PREFIX)) {
                const args = originMessage.slice(COMMAND_PREFIX.length).trim().split(/ +/);
                const command = args.shift().toLowerCase();
                await handleCommand(command, args, event);
            }
        } catch (error) {
            console.error("Error processing message:", error);
            sendRef(event, "ƒê√£ c√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.");
        }
    });

    setInterval(checkReminders, 60000); // chech reminders m·ªói ph√∫t
    console.log("Reminder check interval started.");
}

main()
    .then(() => {
        console.log("Bot nh·∫Øc nh·ªü (JSON storage) ƒë√£ kh·ªüi ƒë·ªông!");
    })
    .catch((error) => {
        console.error("L·ªói nghi√™m tr·ªçng khi kh·ªüi ƒë·ªông bot:", error);
        process.exit(1);
    });

// --- COMMAND HANDLERS ---
async function handleCommand(command, args, event) {
    console.log("COMMAND:", command, "ARGS:", args, "CHANNEL:", event.channel_id);

    switch (command) {
        case SET_REMINDER_COMMAND:
            await handleSetReminder(args, event);
            break;
        case LIST_REMINDERS_COMMAND:
            handleListReminders(event);
            break;
        case DELETE_REMINDER_COMMAND:
            await handleDeleteReminder(args, event);
            break;
        case HELP_COMMAND_REMINDER:
            sendRef(event, HELP_MESSAGE_REMINDER);
            break;
        case SET_DAILY_QUOTE_COMMAND:
            await handleSetDailyQuote(args, event);
            break;
        default:
            sendRef(event, `L·ªánh kh√¥ng h·ª£p l·ªá. G√µ ${COMMAND_PREFIX}${HELP_COMMAND_REMINDER} ƒë·ªÉ xem c√°c l·ªánh.`);
    }
}

async function handleSetReminder(args, event) {
    if (args.length < 3) {
        sendRef(event, `Sai c√∫ ph√°p. V√≠ d·ª•: ${COMMAND_PREFIX}${SET_REMINDER_COMMAND} 09:00 30/10/2024 N·ªôp b√°o c√°o`);
        return;
    }

    const timeStr = args[0];
    const dateStr = args[1];
    const message = args.slice(2).join(" ");

    const [hours, minutes] = timeStr.split(':').map(Number);
    const [day, month, year] = dateStr.split('/').map(Number);

    if (isNaN(hours) || isNaN(minutes) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59 ||
        isNaN(day) || isNaN(month) || isNaN(year) || day < 1 || day > 31 || month < 1 || month > 12 || year < new Date().getFullYear()) {
        sendRef(event, "ƒê·ªãnh d·∫°ng th·ªùi gian (HH:MM) ho·∫∑c ng√†y (DD/MM/YYYY) kh√¥ng h·ª£p l·ªá.");
        return;
    }

    const dueTime = new Date(year, month - 1, day, hours, minutes, 0, 0);

    if (dueTime <= new Date()) {
        sendRef(event, "Th·ªùi gian nh·∫Øc nh·ªü ph·∫£i ·ªü trong t∆∞∆°ng lai.");
        return;
    }

    const newReminder = {
        id: nextReminderId++,
        channel_id: event.channel_id,
        user_id: event.sender_id,
        due_time: dueTime, // L∆∞u tr·ªØ v√†o database
        message: message,
        type: 'ONCE'
    };
    REMINDERS.push(newReminder);
    await saveRemindersToFile();
    sendRef(event, `‚úÖ ƒê√£ ƒë·∫∑t nh·∫Øc nh·ªü (ID: ${newReminder.id}): "${message}" v√†o l√∫c ${dueTime.toLocaleString('vi-VN')}`);
    console.log("New reminder set:", newReminder);
}

function handleListReminders(event) {
    const channelReminders = REMINDERS.filter(r => r.channel_id === event.channel_id && r.type === 'ONCE');
    const dailyQuotes = REMINDERS.filter(r => r.channel_id === event.channel_id && r.type === 'DAILY_API' && r.api_type === 'quote');

    if (channelReminders.length === 0 && dailyQuotes.length === 0) {
        sendRef(event, "Kh√¥ng c√≥ nh·∫Øc nh·ªü n√†o trong k√™nh n√†y.");
        return;
    }

    let response = "üóìÔ∏è --- NH·∫ÆC NH·ªû TRONG K√äNH N√ÄY --- üóìÔ∏è\n";
    if (channelReminders.length > 0) {
        response += "\nüìå Nh·∫Øc nh·ªü m·ªôt l·∫ßn:\n";
        channelReminders.sort((a,b) => a.due_time - b.due_time).forEach(r => { // Sort by due time
            response += `  ID ${r.id}: "${r.message}" - ${new Date(r.due_time).toLocaleString('vi-VN')}\n`;
        });
    }
    if (dailyQuotes.length > 0) {
        response += "\nüí° Nh·∫Øc nh·ªü Quote h√†ng ng√†y:\n";
        dailyQuotes.forEach(r => {
            const timeStr = new Date(r.due_time).toLocaleTimeString('vi-VN', { hour: '2-digit', minute: '2-digit' });
            response += `  ID ${r.id}: G·ª≠i quote v√†o ${timeStr} m·ªói ng√†y.\n`;
        });
    }
    sendRef(event, response);
}

async function handleDeleteReminder(args, event) {
    if (args.length < 1) {
        sendRef(event, `Sai c√∫ ph√°p. V√≠ d·ª•: ${COMMAND_PREFIX}${DELETE_REMINDER_COMMAND} 1`);
        return;
    }
    const reminderIdToDel = parseInt(args[0]);
    if (isNaN(reminderIdToDel)) {
        sendRef(event, "ID nh·∫Øc nh·ªü kh√¥ng h·ª£p l·ªá.");
        return;
    }

    const initialLength = REMINDERS.length;
    REMINDERS = REMINDERS.filter(r => !(r.id === reminderIdToDel && r.channel_id === event.channel_id));

    if (REMINDERS.length < initialLength) {
        await saveRemindersToFile();
        sendRef(event, `üóëÔ∏è ƒê√£ x√≥a nh·∫Øc nh·ªü c√≥ ID ${reminderIdToDel}.`);
    } else {
        sendRef(event, `Kh√¥ng t√¨m th·∫•y nh·∫Øc nh·ªü c√≥ ID ${reminderIdToDel} trong k√™nh n√†y.`);
    }
}

async function fetchQuote() {
    try {
        const response = await axios.get('https://api.quotable.io/random');
        if (response.data && response.data.content) {
            return `"${response.data.content}"\n      ‚Äì ${response.data.author}`;
        }
        return "Kh√¥ng th·ªÉ l·∫•y ƒë∆∞·ª£c tr√≠ch d·∫´n h√¥m nay. API c√≥ th·ªÉ ƒëang g·∫∑p s·ª± c·ªë.";
    } catch (error) {
        console.error("Error fetching quote:", error.message);
        return "ƒê√£ c√≥ l·ªói khi c·ªë g·∫Øng l·∫•y tr√≠ch d·∫´n.";
    }
}

async function handleSetDailyQuote(args, event) {
    if (args.length < 1) {
        sendRef(event, `Sai c√∫ ph√°p. V√≠ d·ª•: ${COMMAND_PREFIX}${SET_DAILY_QUOTE_COMMAND} 08:00`);
        return;
    }
    const timeStr = args[0];
    const [hours, minutes] = timeStr.split(':').map(Number);

    if (isNaN(hours) || isNaN(minutes) || hours < 0 || hours > 23 || minutes < 0 || minutes > 59) {
        sendRef(event, "ƒê·ªãnh d·∫°ng th·ªùi gian kh√¥ng h·ª£p l·ªá. Ph·∫£i l√† HH:MM (v√≠ d·ª•: 07:30).");
        return;
    }

    // X√≥a c√°c c√†i ƒë·∫∑t quote h√†ng ng√†y c≈© trong k√™nh n√†y ƒë·ªÉ tr√°nh tr√πng l·∫∑p
    REMINDERS = REMINDERS.filter(r => !(r.channel_id === event.channel_id && r.type === 'DAILY_API' && r.api_type === 'quote'));
    
    const dueTime = new Date(); // Ng√†y th√°ng nƒÉm kh√¥ng quan tr·ªçng, ch·ªâ gi·ªù ph√∫t
    dueTime.setHours(hours, minutes, 0, 0); 

    const newDailyReminder = {
        id: nextReminderId++,
        channel_id: event.channel_id,
        user_id: event.sender_id,
        due_time: dueTime,
        message: "Tr√≠ch d·∫´n hay h√†ng ng√†y",
        type: 'DAILY_API',
        api_type: 'quote',
        last_triggered_date: null // S·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi trigger l·∫ßn ƒë·∫ßu
    };
    REMINDERS.push(newDailyReminder);
    await saveRemindersToFile();
    sendRef(event, `üí° ƒê√£ ƒë·∫∑t l·ªãch g·ª≠i tr√≠ch d·∫´n hay v√†o ${timeStr} m·ªói ng√†y (ID: ${newDailyReminder.id}).`);
    console.log("New daily quote reminder set:", newDailyReminder);
}

// --- REMINDER CHECKING ---
async function checkReminders() {
    const now = new Date();
    const todayDateStr = now.toDateString(); // D√πng ƒë·ªÉ so s√°nh cho daily tasks
    let remindersModified = false;

    const newRemindersList = [];

    for (const reminder of REMINDERS) {
        let keepReminder = true;
        // ƒê·∫£m b·∫£o due_time l√† ƒë·ªëi t∆∞·ª£ng Date
        const reminderDueTime = (reminder.due_time instanceof Date) ? reminder.due_time : new Date(reminder.due_time);

        if (reminder.type === 'ONCE') {
            if (reminderDueTime <= now) {
                const userMention = `<@${reminder.user_id}>`;
                sendToChannel(reminder.channel_id, `üîî ${userMention} ∆°i, ƒë·∫øn gi·ªù r·ªìi n√®! \nN·ªôi dung: ${reminder.message}`);
                console.log(`Triggered ONCE reminder ID ${reminder.id}: ${reminder.message} for user ${reminder.user_id} in channel ${reminder.channel_id}`);
                keepReminder = false;
                remindersModified = true;
            }
        } else if (reminder.type === 'DAILY_API' && reminder.api_type === 'quote') {
            if (now.getHours() === reminderDueTime.getHours() && now.getMinutes() === reminderDueTime.getMinutes()) {
                if (reminder.last_triggered_date !== todayDateStr) {
                    const quote = await fetchQuote();
                    sendToChannel(reminder.channel_id, `‚òÄÔ∏è Ch√†o bu·ªïi s√°ng! Tr√≠ch d·∫´n h√¥m nay cho b·∫°n:\n${quote}`);
                    reminder.last_triggered_date = todayDateStr; // C·∫≠p nh·∫≠t tr·ª±c ti·∫øp
                    remindersModified = true;
                    console.log(`Triggered DAILY_API quote reminder ID ${reminder.id} in channel ${reminder.channel_id}`);
                }
            }
        }
        
        if (keepReminder) {
            newRemindersList.push(reminder);
        }
    }

    if (remindersModified) {
        REMINDERS = newRemindersList;
        await saveRemindersToFile();
        console.log("Reminders list updated and saved after checking.");
    }
}

// --- H√ÄM G·ª¨I TIN NH·∫ÆN  ---
function sendToChannel(channelId, messageContent) {
    const channel = client.channels.get(channelId);
    if (channel) {
        channel.sendMessage({ t: messageContent })
            .catch(err => console.error(`Error sending message to channel ${channelId}:`, err));
    } else {
        console.error(`Kh√¥ng t√¨m th·∫•y k√™nh v·ªõi ID: ${channelId} ƒë·ªÉ g·ª≠i th√¥ng b√°o.`);
    }
}

function sendRef(event, message) {
    if (!event || !event.channel_id || !event.message_id) {
        console.error("sendRef: Event data is incomplete. Cannot reply.", event);
        // D·ª± ph√≤ng:n·∫øu thi·∫øu d·ªØ li·ªáu s·ª± ki·ªán, g·ª≠i ƒë·∫øn k√™nh n·∫øu c√≥ th·ªÉ, ho·∫∑c ch·ªâ c·∫ßn ghi log
        if (event && event.channel_id) {
            sendToChannel(event.channel_id, message);
        } else {
            console.log("Cannot send reply due to missing event data. Message:", message);
        }
        return;
    }

    const channel = client.channels.get(event.channel_id);
    if (!channel) {
        console.log("Kh√¥ng th·ªÉ t√¨m th·∫•y k√™nh ƒë·ªÉ g·ª≠i reply. Channel ID:", event.channel_id);
        sendToChannel(event.channel_id, message); // Th·ª≠ g·ª≠i d∆∞·ªõi d·∫°ng tin nh·∫Øn th√¥ng th∆∞·ªùng
        return;
    }
    const comingMessage = channel.messages.get(event.message_id);
    if (!comingMessage) {
        console.log("Kh√¥ng t√¨m th·∫•y message g·ªëc ƒë·ªÉ reply. Message ID:", event.message_id, "Sending as regular message.");
        sendToChannel(event.channel_id, message);
        return;
    }
    comingMessage.reply({ t: message })
        .catch(err => console.error(`Error replying to message ${event.message_id} in channel ${event.channel_id}:`, err));
}
